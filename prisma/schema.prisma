generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  auth0Id            String       @unique
  email              String       @unique
  name               String
  role               UserRole     @default(MEMBER)
  personalTaskBoards TaskBoard[]  @relation("PersonalBoards")
  tasks              Task[]       @relation("TaskCreator")
  assignedTasks      Task[]       @relation("TaskAssignees")
  projects           Project[]    @relation("ProjectOwner")
  teamMemberships    TeamMember[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Team {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  members     TeamMember[]
  projects    Project[]    @relation("TeamProjects")
  taskBoards  TaskBoard[]  @relation("TeamBoards")
  tasks       Task[]       @relation("TeamTasks")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeamMember {
  id        String   @id @default(uuid())
  role      TeamRole @default(MEMBER)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
}

model Project {
  id          String        @id @default(uuid())
  title       String
  description String?
  status      ProjectStatus @default(ACTIVE)
  archived    Boolean       @default(false)
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  teamId      String?
  team        Team?         @relation("TeamProjects", fields: [teamId], references: [id])
  taskBoards  TaskBoard[]   @relation("ProjectTaskBoards")
  tasks       Task[]        @relation("ProjectTasks")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TaskBoard {
  id          String        @id @default(uuid())
  title       String
  description String?
  type        TaskBoardType @default(PERSONAL)
  userId      String?
  user        User?         @relation("PersonalBoards", fields: [userId], references: [id])
  teamId      String?
  team        Team?         @relation("TeamBoards", fields: [teamId], references: [id])
  projectId   String?
  project     Project?      @relation("ProjectTaskBoards", fields: [projectId], references: [id])
  tasks       Task[]        @relation("TaskBoardTasks")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  dueDate     DateTime?
  userId      String
  user        User         @relation("TaskCreator", fields: [userId], references: [id])
  assignees   User[]       @relation("TaskAssignees")
  teamId      String?
  team        Team?        @relation("TeamTasks", fields: [teamId], references: [id])
  boardId     String?
  taskBoard   TaskBoard?   @relation("TaskBoardTasks", fields: [boardId], references: [id])
  projectId   String?
  project     Project?     @relation("ProjectTasks", fields: [projectId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

enum TeamRole {
  ADMIN
  MEMBER
  GUEST
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskBoardType {
  PERSONAL
  TEAM
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}
